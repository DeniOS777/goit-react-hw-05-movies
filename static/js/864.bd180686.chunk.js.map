{"version":3,"file":"static/js/864.bd180686.chunk.js","mappings":"4OA+BA,EAzBa,WACX,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,MAAK,SAAAJ,GAAM,OAAIC,EAAUD,EAAd,IACXK,OAAM,SAAAC,GAAK,OAAIC,EAAAA,GAAAA,MAAYD,EAAME,QAAtB,GACf,GAAE,KAGD,6BACE,eAAIC,MAAO,CAAEC,aAAc,OAAQC,SAAU,QAA7C,4BACCX,EAAOY,OAAS,IACf,wBACGZ,EAAOa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,eAAd,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaH,GAArB,SAA4BC,GAASC,KAD9BF,EADC,QASrB,C,sLC7BKI,EAAU,mCACVC,EAAW,+BAEJhB,EAAoB,mCAAG,sGACXiB,MAAM,GAAD,OACvBD,EADuB,uCACgBD,IAFV,YAC5BG,EAD4B,QAKrBC,GALqB,gCAMbD,EAASE,OANI,cAM1BC,EAN0B,yBAOzBA,EAAKC,SAPoB,gCAS3BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDP,EAASQ,WAVzB,2CAAH,qDAcpBC,EAAkB,mCAAG,WAAMC,GAAN,yFACTX,MAAM,GAAD,OACvBD,EADuB,kBACLY,EADK,oBACcb,IAFV,YAC1BG,EAD0B,QAKnBC,GALmB,gCAMXD,EAASE,OANE,cAMxBC,EANwB,yBAOvBA,GAPuB,gCASzBE,QAAQC,OACb,IAAIC,MAAJ,6CAAgDP,EAASQ,WAV3B,2CAAH,sDAclBG,EAAqB,mCAAG,WAAMD,GAAN,yFACZX,MAAM,GAAD,OACvBD,EADuB,kBACLY,EADK,4BACsBb,IAFf,YAC7BG,EAD6B,QAKtBC,GALsB,gCAMdD,EAASE,OANK,cAM3BC,EAN2B,yBAO1BA,EAAKS,MAPqB,gCAS5BP,QAAQC,OACb,IAAIC,MAAJ,6CAAgDP,EAASQ,WAVxB,2CAAH,sDAcrBK,EAAqB,mCAAG,WAAMH,GAAN,yFACZX,MAAM,GAAD,OACvBD,EADuB,kBACLY,EADK,4BACsBb,IAFf,YAC7BG,EAD6B,QAKtBC,GALsB,gCAMdD,EAASE,OANK,cAM3BC,EAN2B,yBAO1BA,EAAKC,SAPqB,gCAS5BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDP,EAASQ,WAVxB,2CAAH,sDAcrBM,EAAsB,mCAAG,WAAMC,GAAN,yFACbhB,MAAM,GAAD,OACvBD,EADuB,iCACUD,EADV,kBAC2BkB,IAFnB,YAC9Bf,EAD8B,QAKvBC,GALuB,gCAMfD,EAASE,OANM,cAM5BC,EAN4B,yBAO3BA,EAAKC,SAPsB,gCAS7BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDP,EAASQ,WAVvB,2CAAH,qD","sources":["pages/Home.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getTrendingMoviesDay } from '../services/api';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    getTrendingMoviesDay()\n      .then(movies => setMovies(movies))\n      .catch(error => toast.error(error.message));\n  }, []);\n\n  return (\n    <main>\n      <h1 style={{ marginBottom: '20px', fontSize: '30px' }}>Trending today</h1>\n      {movies.length > 0 && (\n        <ul>\n          {movies.map(({ id, title, original_title }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`}>{title || original_title}</Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </main>\n  );\n};\n\nexport default Home;\n","const API_KEY = 'fac524451816d908f081cf899bfc32e2';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMoviesDay = async () => {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getInfoOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getCreditsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getReviewsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getMoviesBySearchQuery = async searchQuery => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n"],"names":["useState","movies","setMovies","useEffect","getTrendingMoviesDay","then","catch","error","toast","message","style","marginBottom","fontSize","length","map","id","title","original_title","to","API_KEY","BASE_URL","fetch","response","ok","json","data","results","Promise","reject","Error","status","getInfoOfMovieById","movieId","getCreditsOfMovieById","cast","getReviewsOfMovieById","getMoviesBySearchQuery","searchQuery"],"sourceRoot":""}