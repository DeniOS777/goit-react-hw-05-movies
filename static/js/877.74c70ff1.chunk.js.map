{"version":3,"file":"static/js/877.74c70ff1.chunk.js","mappings":"8PAoDA,EA7Ca,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,IANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAsBN,GACnBO,MAAK,SAAAC,GAAI,OAAIJ,EAAWI,EAAf,IACTC,OAAM,SAAAC,GAAK,OAAIC,EAAAA,GAAAA,MAAYD,EAAME,QAAtB,GACf,GAAE,CAACZ,IAECG,EAIL,OAFAU,QAAQC,IAAIX,IAGV,yBACGA,EAAQY,OAAS,IAChB,SAACC,EAAA,EAAD,CACEC,GAAG,KACHC,QAAQ,OACRC,QAAQ,OACRC,oBAAoB,wCAJtB,SAMGjB,EAAQkB,KACP,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,UAA3C,OACE,2BACE,gBACEC,IACEH,EAAY,yCAC0BA,GAClCI,EAENC,IAAI,eAEN,uBAAIJ,KACJ,uCAAeC,OAVRH,EADX,OAmBX,C,sLClDKO,EAAU,mCACVC,EAAW,+BAEJC,EAAoB,mCAAG,sGACXC,MAAM,GAAD,OACvBF,EADuB,uCACgBD,IAFV,YAC5BI,EAD4B,QAKrBC,GALqB,gCAMbD,EAASE,OANI,cAM1B3B,EAN0B,yBAOzBA,EAAK4B,SAPoB,gCAS3BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAVzB,2CAAH,qDAcpBC,EAAkB,mCAAG,WAAMzC,GAAN,yFACTgC,MAAM,GAAD,OACvBF,EADuB,kBACL9B,EADK,oBACc6B,IAFV,YAC1BI,EAD0B,QAKnBC,GALmB,gCAMXD,EAASE,OANE,cAMxB3B,EANwB,yBAOvBA,GAPuB,gCASzB6B,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAV3B,2CAAH,sDAclBlC,EAAqB,mCAAG,WAAMN,GAAN,yFACZgC,MAAM,GAAD,OACvBF,EADuB,kBACL9B,EADK,4BACsB6B,IAFf,YAC7BI,EAD6B,QAKtBC,GALsB,gCAMdD,EAASE,OANK,cAM3B3B,EAN2B,yBAO1BA,EAAKkC,MAPqB,gCAS5BL,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAVxB,2CAAH,sDAcrBG,EAAqB,mCAAG,WAAM3C,GAAN,yFACZgC,MAAM,GAAD,OACvBF,EADuB,kBACL9B,EADK,4BACsB6B,IAFf,YAC7BI,EAD6B,QAKtBC,GALsB,gCAMdD,EAASE,OANK,cAM3B3B,EAN2B,yBAO1BA,EAAK4B,SAPqB,gCAS5BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAVxB,2CAAH,sDAcrBI,EAAsB,mCAAG,WAAMC,GAAN,yFACbb,MAAM,GAAD,OACvBF,EADuB,iCACUD,EADV,kBAC2BgB,IAFnB,YAC9BZ,EAD8B,QAKvBC,GALuB,gCAMfD,EAASE,OANM,cAM5B3B,EAN4B,yBAO3BA,EAAK4B,SAPsB,gCAS7BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAVvB,2CAAH,qD","sources":["components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getCreditsOfMovieById } from 'services/api';\nimport dummyImage from './dummyUser.jpg';\nimport { Box } from '../Box';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState(null);\n\n  useEffect(() => {\n    getCreditsOfMovieById(movieId)\n      .then(data => setCredits(data))\n      .catch(error => toast.error(error.message));\n  }, [movieId]);\n\n  if (!credits) return;\n\n  console.log(credits);\n\n  return (\n    <div>\n      {credits.length > 0 && (\n        <Box\n          as=\"ul\"\n          display=\"grid\"\n          gridGap=\"15px\"\n          gridTemplateColumns=\"repeat(auto-fill, minmax(150px ,1fr))\"\n        >\n          {credits.map(\n            ({ credit_id, profile_path, original_name, character }) => (\n              <li key={credit_id}>\n                <img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w185${profile_path}`\n                      : dummyImage\n                  }\n                  alt=\"the actor\"\n                />\n                <p>{original_name}</p>\n                <p>Character: {character}</p>\n              </li>\n            )\n          )}\n        </Box>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","const API_KEY = 'fac524451816d908f081cf899bfc32e2';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMoviesDay = async () => {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getInfoOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getCreditsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getReviewsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getMoviesBySearchQuery = async searchQuery => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n"],"names":["movieId","useParams","useState","credits","setCredits","useEffect","getCreditsOfMovieById","then","data","catch","error","toast","message","console","log","length","Box","as","display","gridGap","gridTemplateColumns","map","credit_id","profile_path","original_name","character","src","dummyImage","alt","API_KEY","BASE_URL","getTrendingMoviesDay","fetch","response","ok","json","results","Promise","reject","Error","status","getInfoOfMovieById","cast","getReviewsOfMovieById","getMoviesBySearchQuery","searchQuery"],"sourceRoot":""}