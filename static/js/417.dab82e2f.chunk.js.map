{"version":3,"file":"static/js/417.dab82e2f.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CardActor = styled.li`\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  border-radius: ${p => p.theme.radii.sm};\n  overflow: hidden;\n\n  & img {\n    transition: transform 250ms ease-in-out;\n  }\n\n  &:hover img {\n    transform: scale(1.1);\n  }\n`;\n\nexport const ActorName = styled.p`\n  margin-bottom: ${p => p.theme.space[2]}px;\n  font-size: ${p => p.theme.fontSizes.s};\n  font-weight: ${p => p.theme.fontWeights.bold};\n`;\n\nexport const ActorRole = styled.p`\n  font-size: ${p => p.theme.fontSizes.s};\n`;\n\nexport const WrappInfo = styled.div`\n  padding: ${p => p.theme.space[2]}px;\n  text-align: center;\n`;\n\nexport const WrappImage = styled.div`\n  overflow: hidden;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getCreditsOfMovieById } from 'services/api';\nimport dummyImage from './dummyProfile.jpg';\nimport { Box } from '../Box';\nimport {\n  CardActor,\n  ActorName,\n  ActorRole,\n  WrappInfo,\n  WrappImage,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState(null);\n\n  useEffect(() => {\n    getCreditsOfMovieById(movieId)\n      .then(data => setCredits(data))\n      .catch(error => toast.error(error.message));\n  }, [movieId]);\n\n  if (!credits) return;\n\n  return (\n    <Box as=\"section\" pb={4}>\n      {credits.length > 0 && (\n        <Box\n          as=\"ul\"\n          display=\"grid\"\n          gridGap=\"15px\"\n          gridTemplateColumns=\"repeat(auto-fill, minmax(150px ,1fr))\"\n        >\n          {credits.map(({ credit_id, profile_path, name, character }) => (\n            <CardActor key={credit_id}>\n              <WrappImage>\n                <img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w185${profile_path}`\n                      : dummyImage\n                  }\n                  alt={name}\n                />\n              </WrappImage>\n\n              <WrappInfo>\n                <ActorName>{name}</ActorName>\n                <ActorRole>Character: {character}</ActorRole>\n              </WrappInfo>\n            </CardActor>\n          ))}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Cast;\n","const API_KEY = 'fac524451816d908f081cf899bfc32e2';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMoviesDay = async () => {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getInfoOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getCreditsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getReviewsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getMoviesBySearchQuery = async searchQuery => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n"],"names":["CardActor","styled","p","theme","radii","sm","ActorName","space","fontSizes","s","fontWeights","bold","ActorRole","WrappInfo","WrappImage","movieId","useParams","useState","credits","setCredits","useEffect","getCreditsOfMovieById","then","data","catch","error","toast","message","Box","as","pb","length","display","gridGap","gridTemplateColumns","map","credit_id","profile_path","name","character","src","dummyImage","alt","API_KEY","BASE_URL","getTrendingMoviesDay","fetch","response","ok","json","results","Promise","reject","Error","status","getInfoOfMovieById","cast","getReviewsOfMovieById","getMoviesBySearchQuery","searchQuery"],"sourceRoot":""}