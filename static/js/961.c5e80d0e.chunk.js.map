{"version":3,"file":"static/js/961.c5e80d0e.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect, Suspense } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getInfoOfMovieById } from 'services/api';\nimport { Box } from '../../components/Box';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    getInfoOfMovieById(movieId)\n      .then(movie => setMovie(movie))\n      .catch(error => toast.error(error.message));\n  }, [movieId]);\n\n  if (!movie) return;\n\n  console.log(movie);\n\n  const backLinkHref = location.state?.from ?? '/';\n\n  const userScorePersentage = Number(\n    ((movie.vote_average / 10) * 100).toFixed()\n  );\n\n  return (\n    <main>\n      <Box px={4}>\n        <Link to={backLinkHref}>Go back</Link>\n        <img\n          src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}\n          alt=\"poster\"\n        />\n        <p\n          style={{ marginBottom: '15px', fontSize: '20px', fontWeight: '600' }}\n        >\n          {`${movie.title} (${movie.release_date})`}\n        </p>\n        <p style={{ marginBottom: '15px' }}>\n          User score: {userScorePersentage || 'ü§∑‚Äç‚ôÇÔ∏è'}%\n        </p>\n        <p style={{ marginBottom: '15px' }}>Overview: {movie.overview}</p>\n        <p style={{ marginBottom: '15px' }}>Genres: {movie.genres[0].name}</p>\n\n        <div>\n          <p>Additional information</p>\n          <Box as=\"ul\">\n            <li>\n              <Link to=\"cast\" state={{ from: location.state?.from ?? '/' }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={{ from: location.state?.from ?? '/' }}>\n                Reviews\n              </Link>\n            </li>\n          </Box>\n          <Suspense fallback={null}>\n            <Outlet />\n          </Suspense>\n        </div>\n      </Box>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","const API_KEY = 'fac524451816d908f081cf899bfc32e2';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMoviesDay = async () => {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getInfoOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getCreditsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getReviewsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getMoviesBySearchQuery = async searchQuery => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n"],"names":["location","useLocation","movieId","useParams","useState","movie","setMovie","useEffect","getInfoOfMovieById","then","catch","error","toast","message","console","log","backLinkHref","state","from","userScorePersentage","Number","vote_average","toFixed","px","to","src","poster_path","alt","style","marginBottom","fontSize","fontWeight","title","release_date","overview","genres","name","as","Suspense","fallback","API_KEY","BASE_URL","getTrendingMoviesDay","fetch","response","ok","json","data","results","Promise","reject","Error","status","getCreditsOfMovieById","cast","getReviewsOfMovieById","getMoviesBySearchQuery","searchQuery"],"sourceRoot":""}