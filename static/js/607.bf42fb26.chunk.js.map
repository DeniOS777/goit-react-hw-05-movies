{"version":3,"file":"static/js/607.bf42fb26.chunk.js","mappings":"2PAEaA,EAAaC,EAAAA,GAAAA,GAAH,gFAEF,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGTC,EAAaJ,EAAAA,GAAAA,EAAH,iGACJ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACH,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,YAAYC,MAAxB,IAILC,EAAaP,EAAAA,GAAAA,EAAH,mD,kBC0BvB,EAhCgB,WACd,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,IANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAsBN,GACnBO,MAAK,SAAAC,GAAI,OAAIJ,EAAWI,EAAf,IACTC,OAAM,SAAAC,GAAK,OAAIC,EAAAA,GAAAA,MAAYD,EAAME,QAAtB,GACf,GAAE,CAACZ,IAECG,EAIL,OAFAU,QAAQC,IAAIX,IAGV,SAACY,EAAA,EAAD,CAAKC,GAAI,EAAT,SACGb,EAAQc,OAAS,GAChB,SAACF,EAAA,EAAD,CAAKG,GAAG,KAAKC,GAAI,EAAjB,SACGhB,EAAQiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAAChC,EAAD,YACE,UAACK,EAAD,sBAAqB0B,MACrB,SAACvB,EAAD,UAAawB,MAFEF,EADN,OAQf,sEAIP,C,sLCrCKG,EAAU,mCACVC,EAAW,+BAEJC,EAAoB,mCAAG,sGACXC,MAAM,GAAD,OACvBF,EADuB,uCACgBD,IAFV,YAC5BI,EAD4B,QAKrBC,GALqB,gCAMbD,EAASE,OANI,cAM1BtB,EAN0B,yBAOzBA,EAAKuB,SAPoB,gCAS3BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAVzB,2CAAH,qDAcpBC,EAAkB,mCAAG,WAAMpC,GAAN,yFACT2B,MAAM,GAAD,OACvBF,EADuB,kBACLzB,EADK,oBACcwB,IAFV,YAC1BI,EAD0B,QAKnBC,GALmB,gCAMXD,EAASE,OANE,cAMxBtB,EANwB,yBAOvBA,GAPuB,gCASzBwB,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAV3B,2CAAH,sDAclBE,EAAqB,mCAAG,WAAMrC,GAAN,yFACZ2B,MAAM,GAAD,OACvBF,EADuB,kBACLzB,EADK,4BACsBwB,IAFf,YAC7BI,EAD6B,QAKtBC,GALsB,gCAMdD,EAASE,OANK,cAM3BtB,EAN2B,yBAO1BA,EAAK8B,MAPqB,gCAS5BN,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAVxB,2CAAH,sDAcrB7B,EAAqB,mCAAG,WAAMN,GAAN,yFACZ2B,MAAM,GAAD,OACvBF,EADuB,kBACLzB,EADK,4BACsBwB,IAFf,YAC7BI,EAD6B,QAKtBC,GALsB,gCAMdD,EAASE,OANK,cAM3BtB,EAN2B,yBAO1BA,EAAKuB,SAPqB,gCAS5BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAVxB,2CAAH,sDAcrBI,EAAsB,mCAAG,WAAMC,GAAN,yFACbb,MAAM,GAAD,OACvBF,EADuB,iCACUD,EADV,kBAC2BgB,IAFnB,YAC9BZ,EAD8B,QAKvBC,GALuB,gCAMfD,EAASE,OANM,cAM5BtB,EAN4B,yBAO3BA,EAAKuB,SAPsB,gCAS7BC,QAAQC,OACb,IAAIC,MAAJ,6CAAgDN,EAASO,WAVvB,2CAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewItem = styled.li`\n  &:not(:last-child) {\n    margin-bottom: ${p => p.theme.space[4]}px;\n  }\n`;\nexport const AuthorName = styled.p`\n  margin-bottom: ${p => p.theme.space[3]}px;\n  font-weight: ${p => p.theme.fontWeights.middle};\n  letter-spacing: 0.02em;\n`;\n\nexport const TextReview = styled.p`\n  letter-spacing: 0.02em;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getReviewsOfMovieById } from 'services/api';\nimport { AuthorName, TextReview, ReviewItem } from './Reviews.styled';\nimport { Box } from '../Box';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    getReviewsOfMovieById(movieId)\n      .then(data => setReviews(data))\n      .catch(error => toast.error(error.message));\n  }, [movieId]);\n\n  if (!reviews) return;\n\n  console.log(reviews);\n\n  return (\n    <Box pb={4}>\n      {reviews.length > 0 ? (\n        <Box as=\"ul\" pl={4}>\n          {reviews.map(({ id, author, content }) => (\n            <ReviewItem key={id}>\n              <AuthorName>Author: {author}</AuthorName>\n              <TextReview>{content}</TextReview>\n            </ReviewItem>\n          ))}\n        </Box>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </Box>\n  );\n};\n\nexport default Reviews;\n","const API_KEY = 'fac524451816d908f081cf899bfc32e2';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMoviesDay = async () => {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getInfoOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getCreditsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getReviewsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getMoviesBySearchQuery = async searchQuery => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n"],"names":["ReviewItem","styled","p","theme","space","AuthorName","fontWeights","middle","TextReview","movieId","useParams","useState","reviews","setReviews","useEffect","getReviewsOfMovieById","then","data","catch","error","toast","message","console","log","Box","pb","length","as","pl","map","id","author","content","API_KEY","BASE_URL","getTrendingMoviesDay","fetch","response","ok","json","results","Promise","reject","Error","status","getInfoOfMovieById","getCreditsOfMovieById","cast","getMoviesBySearchQuery","searchQuery"],"sourceRoot":""}