{"version":3,"file":"static/js/978.8eaabb56.chunk.js","mappings":"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","sources":["components/SearchBox/SearchBox.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import React from 'react';\n\nconst SearchBox = ({ onSubmit }) => {\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n\n    if (form.elements.search.value.trim() === '') {\n      onSubmit(form.elements.search.value);\n      return console.log('Search field is empty');\n    }\n    onSubmit(form.elements.search.value);\n    form.reset();\n  };\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"search\" />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchBox;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMoviesBySearchQuery } from 'services/api';\nimport SearchBox from '../components/SearchBox';\n\nconst Movies = () => {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryParam = searchParams.get('query') ?? '';\n\n  const updateSearchQuery = query => {\n    setSearchParams(query !== '' ? { query } : {});\n  };\n\n  useEffect(() => {\n    if (!queryParam) return setMovies([]);\n\n    getMoviesBySearchQuery(queryParam)\n      .then(movies => setMovies(movies))\n      .catch(error => toast.error(error.message));\n  }, [queryParam]);\n\n  console.log(movies);\n  console.log(location);\n\n  return (\n    <main>\n      <SearchBox onSubmit={updateSearchQuery} />\n      {movies.length > 0 && (\n        <ul>\n          {movies.map(({ id, original_title, title }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {original_title || title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","const API_KEY = 'fac524451816d908f081cf899bfc32e2';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMoviesDay = async () => {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getInfoOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getCreditsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getReviewsOfMovieById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n\nexport const getMoviesBySearchQuery = async searchQuery => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  return Promise.reject(\n    new Error(`Server responsed with status code: ${response.status}`)\n  );\n};\n"],"names":["onSubmit","autoComplete","e","preventDefault","form","target","elements","search","value","trim","console","log","reset","type","name","location","useLocation","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","queryParam","get","useEffect","getMoviesBySearchQuery","then","catch","error","toast","message","query","length","map","id","original_title","title","to","state","from","API_KEY","BASE_URL","getTrendingMoviesDay","fetch","response","ok","json","data","results","Promise","reject","Error","status","getInfoOfMovieById","movieId","getCreditsOfMovieById","cast","getReviewsOfMovieById","searchQuery"],"sourceRoot":""}